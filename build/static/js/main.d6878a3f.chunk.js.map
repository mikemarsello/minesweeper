{"version":3,"sources":["bomb.svg","functions.js","Game.js","index.js","logo.svg"],"names":["module","exports","__webpack_require__","p","checkAdjacentSquaresHelper","id","grid","board","adjacentCells","undefined","push","Game","react_default","a","createElement","className","Game_Board","Component","Setup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","boardClicked","boardSize","difficulty","showSizeDialog","showDiffDialog","message","playAgain","clickSize","bind","assertThisInitialized","clickDifficulty","clickSquare","newState","assign","setState","size","boardClick","i","Math","pow","diff","diffFactor","floor","random","length","tmpBoard","total","calcBoard","checkedBoard","checkAdjacentSquares","boardValue","forEach","e","every","val","arr","bombs","item","index","filter","value","_this2","onClick","squares","numSquares","Game_Square","bomb","clicked","key","handleClick","reset","src","logo","alt","React","Square","_this3","_this4","styles","flex","height","backgroundImage","concat","opacity","pStyles","display","style","Board","Game_Setup","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.d6878a3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.07f867ca.svg\";","\nexport const calcBoard = (board, grid) => {\n    for (let i = 0; i < board.length; i++) {\n        if (board[i] === 'nobomb') {\n            let total = 0;\n            // left\n            if (i % grid !== 0 && board[(i - grid) - 1] !== 'undefined' && board[(i - grid) - 1] === 'bomb') {\n                total += 1;\n            }\n            if (board[i - grid] !== 'undefined' && board[i - grid] === 'bomb')  {\n                total += 1;\n            }\n            // right\n            if ((i + 1) % grid !== 0 && board[(i - grid) + 1] !== 'undefined' && board[(i - grid) + 1] === 'bomb') {\n                total += 1;\n            }\n            // left\n            if (i % grid !== 0 && board[i - 1] !== 'undefined' && board[i - 1] === 'bomb') {\n                total += 1;\n            }\n            //right\n            if ((i + 1) % grid !== 0 && board[i + 1] !== 'undefined' && board[i + 1] === 'bomb') {\n                total += 1;\n            }\n            // left\n            if (i % grid !== 0 && board[(i + grid) - 1] !== 'undefined' && board[(i + grid) - 1] === 'bomb') {\n                total += 1;\n            }\n            if (board[i + grid] !== 'undefined' && board[i + grid] === 'bomb') {\n                total += 1;\n            }\n            // right\n            if ((i + 1) % grid !== 0 && board[(i + grid) + 1] !== 'undefined' && board[(i + grid) + 1] === 'bomb') {\n                total += 1;\n            }\n            board[i] = total;            \n        }\n    }\n    return board;\n}\n\nexport const checkAdjacentSquares = (id, boardValue, boardClicked, grid) => {\n    if (boardValue[id] === 'bomb') {\n        for (let i = 0; i < boardValue.length; i++) {\n            boardClicked[i] = true;\n        }\n    }\n    else if (boardValue[id] > 0) {\n        boardClicked[id] = true;\n    }\n    else {\n        boardClicked[id] = true;\n        let adjacentSquares = checkAdjacentSquaresHelper(id, grid, boardValue);\n        adjacentSquares.forEach(function(e) {\n            if(boardClicked[e] !== true) {\n                checkAdjacentSquares(e, boardValue, boardClicked, grid)\n            }\n        });\n\n    }\n    return boardClicked;\n}\n\n// helper function to return array of adjacent cell IDs\nconst checkAdjacentSquaresHelper = (id, grid, board) => {\n    let adjacentCells = [];\n        // left\n        if ((id % grid !== 0) && (board[(id - grid) - 1] !== undefined)) {\n            adjacentCells.push((id - grid) - 1);\n        }\n        if (board[id - grid] !== undefined)  {\n            adjacentCells.push(id - grid);\n        }\n        // right\n        if ((id + 1) % grid !== 0 && board[(id - grid) + 1] !== undefined) {\n            adjacentCells.push((id - grid) + 1);\n        }\n        // left\n        if (id % grid !== 0 && board[id - 1] !== undefined) {\n            adjacentCells.push(id - 1);\n        }\n        //right\n        if ((id + 1) % grid !== 0 && board[id + 1] !== undefined) {\n            adjacentCells.push(id + 1);\n        }\n        // left\n        if (id % grid !== 0 && board[(id + grid) - 1] !== undefined) {\n            adjacentCells.push((id + grid) - 1);\n        }\n        if (board[id + grid] !== undefined) {\n            adjacentCells.push(id + grid);\n        }\n        // right\n        if ((id + 1) % grid !== 0 && board[(id + grid) + 1] !== undefined) {\n            adjacentCells.push((id + grid) + 1);\n        }\n    return adjacentCells;\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport bomb from './bomb.svg';\nimport './game.css';\nimport { calcBoard, checkAdjacentSquares } from './functions.js';\n\nclass Game extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Minesweeper</h1>\n        </header>\n        <Board />\n      </div>\n    );\n  }\n}\n\nclass Setup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: null,\n      boardClicked: null,\n      boardSize: null,\n      difficulty: null,\n      showSizeDialog: true,\n      showDiffDialog: false,\n      message: 'Click any square',\n      playAgain: false\n    };\n    this.clickSize = this.clickSize.bind(this);\n    this.clickDifficulty = this.clickDifficulty.bind(this);\n    this.clickSquare = this.clickSquare.bind(this);\n  }\n\n  reset() {\n    let newState = Object.assign({}, this.state);\n    newState = {\n      board: null,\n      boardClicked: null,\n      boardSize: null,\n      difficulty: null,\n      showSizeDialog: true,\n      showDiffDialog: false,\n      message: 'Click any square',\n      playAgain: false\n    };\n    this.setState((state) => {\n      return newState;\n    });\n  }\n\n  clickSize(size) {\n    let board = [];\n    let boardClick = [];\n    for (let i = 0; i < Math.pow(size, 2); i++) {\n      board.push('nobomb');\n      boardClick.push(false);\n    }\n    let newState = Object.assign({}, this.state);\n    newState.board = board;\n    newState.boardClicked = boardClick;\n    newState.boardSize = size;\n    newState.showSizeDialog = false;\n    newState.showDiffDialog = true;\n    this.setState((state) => {\n      return newState;\n    });\n  }\n\n  clickDifficulty(diff) {\n    let diffFactor = (diff === 'hard') ? .4 : .25;\n    if (diff === 'easy') {\n      diffFactor = .1;\n    }\n    let newState = Object.assign({}, this.state);\n    // assign random true values based on difficulty factor\n    for (let i = 0; i < (Math.pow(this.state.boardSize, 2) * diffFactor); i++) {\n      newState.board[Math.floor(Math.random() * this.state.board.length)] = 'bomb';\n    }\n    // determine number of adjacent bombs\n    let tmpBoard = calcBoard(newState.board, this.state.boardSize);\n    newState.board = tmpBoard;\n    newState.showDiffDialog = false;\n    newState.difficulty = diff;\n    this.setState((state) => {\n      return newState;\n    });\n  }\n\n  clickSquare(id) {\n    if (!this.state.playAgain) {\n      let newState = Object.assign({}, this.state);\n      let checkedBoard = checkAdjacentSquares(id, this.state.board, this.state.boardClicked, this.state.boardSize);\n      newState.boardClicked = checkedBoard;\n      if (checkedBoard.every((val, i, arr) => val === arr[0] )) {\n        newState.message = 'BOOM!!!';\n        newState.playAgain = true;\n      }\n      let bombs = [];\n      this.state.board.forEach(function(item, index, arr) {\n        if (item === 'bomb') {\n          bombs.push(index);\n        }\n      });\n      function checkBoard(value) {\n        return value === false;\n      }\n      let numClicked = checkedBoard.filter(checkBoard);\n      if (numClicked.length === bombs.length) {\n        newState.message = 'You won!!!';\n        newState.playAgain = true;\n      } \n      this.setState((state) => {\n        return newState;\n      });\n    }\n  }\n\n  render() {\n    if (this.state.showSizeDialog === true) {\n      return (\n        <div className='dialog-size'>\n          <h3>Select the size board you would like</h3>\n          <div className=\"button-wrapper\">\n            <button onClick={() => this.clickSize(6)}>6x6</button>\n            <button onClick={() => this.clickSize(8)}>8x8</button>\n            <button onClick={() => this.clickSize(10)}>10x10</button>\n            <button onClick={() => this.clickSize(12)}>12x12</button>\n          </div>\n        </div>\n      );\n    }\n    else if (this.state.showDiffDialog === true) {\n      return (\n        <div className='dialog-diff'>\n          <h3>Select difficulty level</h3>\n          <div className=\"button-wrapper\">\n            <button onClick={() => this.clickDifficulty('easy')}>Easy</button>\n            <button onClick={() => this.clickDifficulty('medium')}>Medium</button>\n            <button onClick={() => this.clickDifficulty('hard')}>Hard</button>\n          </div>\n        </div>\n      );\n    }\n    else {\n      let squares = [];\n      let numSquares = Math.pow(this.state.boardSize, 2);\n      for (let i = 0; i < numSquares; i++) {\n        squares.push(<Square board={this.state.board} grid={this.state.boardSize} bomb={this.state.board[i]} \n          clicked={this.state.boardClicked[i]} key={i} id={i} handleClick={this.clickSquare}/>);\n      }\n      let playAgain = (this.state.playAgain) ? <button className=\"play-again\" onClick={() => this.reset()}>Play again?</button> : '';\n      return (\n        <div>\n          <div id=\"message\">\n            <h3>{this.state.message}</h3>\n            {playAgain}\n          </div>\n          <div className=\"game-board\">\n            <div className=\"game-data\">\n              <div>Size: {this.state.boardSize}x{this.state.boardSize}</div>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <div>Difficulty:<br /> {this.state.difficulty}</div>\n            </div>\n            <div className=\"game-play\">\n              {squares}\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.handleClick(this.props.id);\n  }\n  \n  render () {\n    let grid = 100 / this.props.grid;\n    let styles = {\n      flex: '0 0 ' + grid + '%',\n      height: grid * 5 + 'px',\n      backgroundImage: (this.props.bomb === 'bomb' && this.props.clicked) ? `url(${bomb})` : 'none',\n      opacity: (this.props.clicked) ? 1 : .5\n    };\n    let pStyles = {\n      display: (this.props.clicked) ? 'block' : 'none'\n    }\n    return (\n      <div className=\"square\" style={styles} onClick={() => this.handleClick()}>\n        <p style={pStyles}>{(this.props.bomb !== 'bomb') ? this.props.bomb : ''}</p>\n      </div>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <div>\n        <Setup board={this.props.board} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/logo.fb2d0b51.svg\";"],"sourceRoot":""}